c
n
pos
s
n
rows[pos.first][pos.last]
n
pos.all? { |n| n.between?(0, 7) }
pos
s
n
c
x
n
s
n
c
n
c
n
sn
s
n
s
c
q
c
cc
c
cc
c
cc
c
cc
c
q
chosen_piece
q
c
board.my_pieces(color).map {|p| p.pos}
c
board.my_pieces(color).map {|p| p.pos}
c
board.my_pieces(color).map {|p| p.pos}
c
board.my_pieces(color).map {|p| p.pos}
c
board.my_pieces(color).map {|p| p.pos}
c
board.my_pieces(color).map {|p| p.pos}
c
board.my_pieces(color).map {|p| p.pos}
q
board.my_pieces(color).map {|p| p.pos}
board.render
c
q
board.render
board.my_pieces(color).map {|p| p.pos}
c
board.render
board.my_pieces(color).map {|p| p.pos}
q
board.my_pieces(color).map {|p| p.pos}
c
board.my_pieces(color).map {|p| p.pos}
q
c
board.my_pieces(color).map {|p| p.pos}
c
cc
c
board.my_pieces(color).map {|p| p.pos}
q
c
q
my_pieces(color).map { |p| p.pos}
my_pieces(color)
s
c
s
c
display.render
a.map{|p|p.pos}
a.map{|p|p.symbol}
a
c
q
start_pos
end_pos
s
c
q
c
cc
c
q
old_color
color
b=pieces.map {|p| p.color}
b=old_pos
b=old_pos.map {|p| p.pos}
a=pieces.map {|p| p.pos}
a=pieces.map {|p| p.symbol}
c
q
c
Ã§c
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
rows.flatten.select { |piece| piece.symbol != ' ' }
c
cc
c
cc
c
q
pieces.map { |p| p.pos}
display.render
pieces.select { |piece| piece.color == color }.map {|p| p.pos}
color
n
c
q
n
rows.flatten.select { |piece| piece.symbol != ' ' }.map {|p| p.pos}
rows.flatten.select { |piece| piece.symbol != ' ' }
s
pieces.map {|p| p.pos}
pieces.map {|p| p.symbol}
pieces.select { |piece| piece.color == color }.map {|p| p.pos}
s
c
q
display.render
board.my_pieces(color).select { |piece| !piece.moves.empty? }.map {|p| p.pos}
board.my_pieces(color).map {|p| p.pos}
board.my_pieces(color)
display.render
board.my_pieces(color).select { |piece| !piece.moves.empty? }.map {|p| p.pos}
board.my_pieces(color).select { |piece| !piece.moves.empty? }.first
board.my_pieces(color).select { |piece| !piece.moves.empty? }
chosen_piece
n
s
c
chosen_piece
n
s
c
chosen_piece
n
s
c
chosen_piece
n
s
c
q
piece.symbol
piece.pos
piece.valid_moves
n
s
piece.valid_moves
s
piece.valid_moves
c
s
c
n
chosen_piece
n
pieces.select { |piece| piece.color == color }
s
c
chosen_piece
n
s
c
n
s
n
s
c
n
chosen_piece
n
s
c
n
s
c
q
board.my_pieces(color).map { |piece| [piece.pos, piece.valid_moves] }.select { |(pos, moves)| !moves.empty? }.first
board.my_pieces(color).map { |piece| [piece.pos, piece.valid_moves] }.select { |(pos, moves)| !moves.empty? }
board.my_pieces(color).map {|p| p.symbol}
c
board.my_pieces(color).map {|p| p.symbol}
board.my_pieces(color)
q
chosen_piece
c
chosen_piece
n
chosen_piece
q
chosen_piece
c
q
c
q
c
y
q
board.move_piece(color, chosen_piece.first, chosen_piece.last.sample)
chosen_piece
q
c
q
c
y
g
a
c
n
nn
n
nn
n
display color
c
color
c
q
color
 board.my_pieces(color)color
 board.my_pieces(color)
n
